lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Age+Income+Education+Occupation,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Gender+Age+Income+Education,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Gender+Age+Education,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Gender+Age+Education+Occupation,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Gender+Education+Occupation,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q1k~Gender+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q2k~Gender+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q2k~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q4k~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q4k~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q1k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q2k~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$q2k)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(q7k~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1 <- lda(Q7K~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
da1 <- lda(Q7K~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q7K)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(Q8K~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q8K)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(Q10C1~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q10C1)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- lda(Q14C~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1 <- lda(Q14C~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q14C)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
da1 <- qda(Q14C~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q14C)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q14C)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
#DA
#try1
library(MASS)
da1 <- qda(Q14C~Gender+Age+Education+Occupation+Income,data=mastercopy2)
da1
#LDA preduction
lda.testing <- predict(da1)
#confusion matrix
accuracy <- table(lda.testing$class,mastercopy2$Q14C)
accuracy
sum(accuracy[row(accuracy) == col(accuracy)]) / sum(accuracy)
View(res.pca3)
real.estate <- read.csv("C://Users//vasu2//Downloads//real.csv")
lm1<- lm(Price ~ .-ID, data = real.estate)
summary(lm1)
plot(lm1)# to check linearlity and normality
mahal <- mahalanobis(real.estate[,-1], colMeans(real.estate[,-1]), cov(real.estate[,-1]))
cuttoff #cuttoff score
ncol(real.estate[,-1])
badmah=as.numeric(mahal<cuttoff)
table(badmah)
#leverage
k=10#no of variables in lm
leverage = hatvalues(lm1)
cutlev = (2*k+2)/nrow(real.estate)
cutlev
badlev= as.numeric(leverage>cutlev)
table(badlev)
#Cook dist
cooks = cooks.distance(lm1)
cutcook= 4/(nrow(real.estate[,-1])-k-1)
cutcook
badcook = as.numeric(cooks> cutcook)
table(badcook)
#sum
totalout= badmah+badlev+badcook
table(totalout)
#getting rid
noout= subset(real.estate, totalout<2)
#newmodel
newmodel <- lm(Price~.-ID, data = noout)
summary(newmodel)
#to check assumptions
plot(newmodel)
fdsfs
#newmodel
newmodel <- lm(Price~.-ID, data = noout)
summary(newmodel)
#getting rid
noout= subset(real.estate, totalout<2)
#sum
totalout= badmah+badlev+badcook
#For outliers
cuttoff= qchisq(1-0.001,ncol(real.estate[,-1]))
mahal <- mahalanobis(real.estate[,-1], colMeans(real.estate[,-1]), cov(real.estate[,-1]))
cuttoff #cuttoff score
ncol(real.estate[,-1])
badmah=as.numeric(mahal<cuttoff)
table(badmah)
#leverage
k=10#no of variables in lm
leverage = hatvalues(lm1)
cutlev = (2*k+2)/nrow(real.estate)
cutlev
badlev= as.numeric(leverage>cutlev)
table(badlev)
#Cook dist
cooks = cooks.distance(lm1)
cutcook= 4/(nrow(real.estate[,-1])-k-1)
cutcook
badcook = as.numeric(cooks> cutcook)
table(badcook)
#sum
totalout= badmah+badlev+badcook
table(totalout)
#getting rid
noout= subset(real.estate, totalout<2)
#newmodel
newmodel <- lm(Price~.-ID, data = noout)
summary(newmodel)
#to check assumptions
plot(newmodel)
# Fit the full model
full.model <- lm(Price ~.-ID, data = noout)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
resid(step.model)
# Fit the full model
full.model <- lm(Price ~.-ID, data = noout)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
resid(step.model)
# Fit the full model
full.model <- lm(noout$Price ~.-noout$ID, data = noout)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
resid(step.model)
write.csv(noout,"noout.csv", row.names = FALSE)
df <- read.csv("noout.csv")
# Fit the full model
full.model <- lm(Price ~.-ID, data = df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
resid(step.model)
summary(step.model)
AIC(step.model)
View(real.estate)
#Which variable is strnngest
install.packages("QuantPsyc")
library(QuantPsyc)
lm.beta(step.model)
summary(step.model)
names(mastercopy)
View(mastercopy2)
View(mastercopy2["Q6K"])
summary(mastercopy2["Q6K"])
mastercopy[mastercopy2["Q6K"] == 1 ]
mastercopy2[mastercopy2["Q6K"] == 1 ]
mastercopy2["Q6K"]
library(psych)
describe(mastercopy2)
cordata <-cor(mastercopy2)
cordata <-cor(mastercopy2)
cordata <-cor(mastercopy2)
cordata <-cor(mastercopy2)
library(corrplot)
corrplot(cordata, method="number")
#Corelation
cormat <- round(cor(mastercopy2),2)
#Corelation
cormat <- round(cor(mastercopy2),2)
head(cormat)
install.packages("reshape2")
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
#Corelation
cormat <- round(cor(mastercopy2),2)
head(cormat)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
ggheatmap +
+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
ggheatmap +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 40, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
ggheatmap +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 8, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
ggheatmap +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
